/*
 * tasks.c
 *
 *  Created on: May 6, 2021
 *      Author: sebastian
 */

#include "tasks.h"

/*
 * Functions
 */

// See header file for documentation

void sensorProcessing() {

	// Read all digital sensor values
	checkOvercurrentSwitch(&overcurrentswitch);
	checkMainRelay(&relay);
	checkOvertemp(&overtemp);
	checkEnableSwitch(&enableswitch);
	checkFootSwitch(&footswitch);

	// If button is pressed, start overcurrent timer
	if (overcurrentswitch) {
		overcurrent_timer = TEN_SECONDS;
	}

	// Write overtemperature error
	motor_errors.motor_overtemp = overtemp;

	// Write values for state machine to check
	statemachine.relay_status = relay;
	statemachine.switches = (enableswitch & footswitch);


	// Read analog values from conversions
	getBatteryRaw(&battery_voltage.raw);
	getTorqueRaw(&torque.raw);
	getPhaseARaw(&phaseA.raw);
	getPhaseBRaw(&phaseB.raw);

	// Remove offset from all analog values
	// TODO: Add digital filtering here if necessary
	battery_voltage.flt = battery_voltage.raw - battery_voltage.offset;
	torque.flt = torque.raw - torque.offset;
	phaseA.flt = phaseA.raw - phaseA.offset;
	phaseB.flt = phaseB.raw - phaseB.offset;

	// Check for errors and calculate all physical values from analog values
	motor_errors.overvoltage = (battery_voltage.flt > OVERVOLT_THRESHOLD - battery_voltage.offset) ? 1 : 0;
	motor_errors.undervoltage = (battery_voltage.flt < UNDERVOLT_THRESHOLD - battery_voltage.offset) ? 1 : 0;
	battery_voltage.phys = battery_voltage.flt * BATTERY_CONVERSION;

	motor_errors.torque_disc = (torque.flt > DISCONNECT_THRESHOLD - torque.offset) ? 1 : 0;
	if (overcurrent_timer) {
		torque.phys = torque.flt * OVERCURR_CONVERSION;
		overcurrent_timer--;
	} else {
		torque.phys = torque.flt * TORQUE_CONVERSION;
	}

	motor_errors.phaseA_overcurr = (phaseA.flt > OVERCURRENT_THRESHOLD - phaseA.offset) ? 1 : 0;
	motor_errors.phaseB_overcurr = (phaseB.flt > OVERCURRENT_THRESHOLD - phaseB.offset) ? 1 : 0;
	phaseA.phys = phaseA.flt * CURRENT_CONVERSION - CURRENT_OFFSET;
	phaseB.phys = phaseB.flt * CURRENT_CONVERSION - CURRENT_OFFSET;
	phaseC.phys = -phaseA.phys - phaseB.phys;


	// Read the motor's position from encoder driver
	readPosition(&position.pos_raw);
	rawToRadsMech(position.pos_raw, &position.th_mech);
	rawToRadsEl(position.pos_raw, &position.th_el);
}


void fieldOrientedControl() {
	if (motor_errors.motor_overtemp | motor_errors.overvoltage | motor_errors.undervoltage |
		motor_errors.torque_disc | motor_errors.phaseA_overcurr | motor_errors.phaseB_overcurr) {
		statemachine.state = STATE_FAULT;
	}

	switch(statemachine.state) {
		case STATE_INIT: // This state is a one-pass that will reset all variables.
			initVariables();
			statemachine.state = STATE_READY;
			break;

		case STATE_READY: // This state awaits the ready-signal in the form of drive and foot switch.
			if (statemachine.switches) { statemachine.state = STATE_CALIB; }
			break;

		case STATE_CALIB: // This state gets the measurement offsets by averaging samples when idle, and pre-charges.
			// TODO: Torque should perhaps not be averaged, as the user is likely pressing it down.
			if (calib_counter < AVG_SAMPLES) {
				voltage_samples[calib_counter] = battery_voltage.raw;
				torque_samples[calib_counter] = torque.raw;
				phaseA_samples[calib_counter] = phaseA.raw - (TWELVE_BIT_MAX >> 1);
				phaseB_samples[calib_counter] = phaseB.raw - (TWELVE_BIT_MAX >> 1);
				calib_counter++;
			} else {
				u32 acc_v = 0, acc_t = 0, acc_A = 0, acc_B = 0;
				for (u16 i = 0; i < calib_counter; i++) {
					acc_v += voltage_samples[i];
					acc_t += torque_samples[i];
					acc_A += phaseA_samples[i];
					acc_B += phaseB_samples[i];
				}
				battery_voltage.offset = acc_v/AVG_SAMPLES;
				torque.offset = acc_t/AVG_SAMPLES;
				phaseA.offset = acc_A/AVG_SAMPLES;
				phaseB.offset = acc_B/AVG_SAMPLES;

				calib_done = 1;
			}

			if (calib_done) {
				enablePrecharge();
				if (precharge_counter++ > SIX_TENTHS_SECOND) {
					enableMainRelay();
					disablePrecharge();
					precharge_counter = 0;
					statemachine.state = STATE_RUN;
				}
			}
			break;

		case STATE_RUN:
			// TODO: wtf happens here that isn't FOC or UART? How should this be structured at all...
			// Place FOC here and just remove the other task or rename this one?
			// Check the main relay - although it may not be open the first few times.
			// Consider adding enable/disable for the VHDL modules
			break;

		case STATE_FAULT:
			if (statemachine.clear_fault) {
				motor_errors.motor_overtemp = 0;
				motor_errors.overvoltage = 0;
				motor_errors.undervoltage = 0;
				motor_errors.torque_disc = 0;
				motor_errors.phaseA_overcurr = 0;
				motor_errors.phaseB_overcurr = 0;
				statemachine.state = STATE_INIT;
				statemachine.clear_fault = 0;
			}
			break;

		default:
			statemachine.state = STATE_INIT;
			break;
	}
}


void communicationTask() {
	// TODO: Run this in the main loop, which will just do its thing all the time.
	// The remaining tasks will only be run when the ADC interrupts.
}

void initVariables() {
	motor_errors.motor_overtemp = 0;
	motor_errors.overvoltage = 0;
	motor_errors.undervoltage = 0;
	motor_errors.torque_disc = 0;
	motor_errors.phaseA_overcurr = 0;
	motor_errors.phaseB_overcurr = 0;
	statemachine.clear_fault = 0;

	battery_voltage.offset = 0;
	torque.offset = 0;
	phaseA.offset = 0;
	phaseB.offset = 0;

	overcurrent_timer = 0;

	ocvvalues.ocv1 = 0;
	ocvvalues.ocv2 = 0;
	ocvvalues.ocv3 = 0;
	setDutyCycles(&ocvvalues);

	calib_counter = 0;
	calib_done = 0;
	precharge_counter = 0;

	// TODO: Reset more variables, like PI controllers, or other things that can be changed by UART.
}
