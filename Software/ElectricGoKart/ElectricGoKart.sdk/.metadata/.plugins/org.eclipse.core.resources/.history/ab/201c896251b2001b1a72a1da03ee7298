/*
 * led_matrix.c
 *
 *  Created on: Mar 24, 2021
 *      Author: jakob
 */

/***************************** Include Files *********************************/
#include "clarke_park.h"


/************************** Function Definitions *****************************/
// See header file for documentation

void clarkeTransform( three_phased_t *input, two_phased_t *output )
{
	//two_phased_t temp_output;

	output->arg1 = input->arg1;
	output->arg2 = RECI_SQRT_3*(input->arg1 + 2*input->arg2);

	//temp_output.I_alpha = input->I_a;
	//temp_output.I_beta 	= 0.5774*(input->I_a + 2*input->I_b); // 1/sqrt(3) = 0.5774

	//*output = temp_output;
}


void parkTransform( two_phased_t *input, f32 input_angle, two_phased_t *output )
{
	output->arg1 = input->arg1 * taylor_cos(input_angle) + input->arg2 * taylor_sin(input_angle);
	output->arg2 = input->arg2 * taylor_cos(input_angle) - input->arg1 * taylor_sin(input_angle);
}


void invClarkeTransform( two_phased_t *input, three_phased_t *output )
{
	output->arg1 = input->arg1;
	output->arg2 = -0.5*input->arg1 + SQRT_3_OVER_2*input->arg2;
	output->arg3 = -0.5*input->arg1 - SQRT_3_OVER_2*input->arg2;

}


void invParkTransform( two_phased_t *input, f32 input_angle, two_phased_t *output )
{
	output->arg1 = input->arg1 * taylor_cos(input_angle) - input->arg2 * taylor_sin(input_angle);
	output->arg2 = input->arg2 * taylor_cos(input_angle) - input->arg1 * taylor_sin(input_angle);
}

f32 taylor_sin( f32 x )
{
	f32 temp_output = 0;

	if( x > PI )
	{
		while( x > PI )
		{
			x = x - 2*PI;
		}
	}
	else if( x < -PI )
	{
		while( x < -PI )
		{
			x = x + 2*PI;
		}
	}

	temp_output = x*(a0+x*x*(a1+x*x*(a2+x*x*(a3+x*x*a4))));

	return( temp_output );
}

f32 taylor_cos( f32 x )
{
	f32 temp_output = 0;

	// |x|
	if( x < 0 )
	{
		x = -x;
	}

	// Displace x (pi/2+|x|)
	x = PI/2 + x;

	temp_output = taylor_sin(x);

	return( temp_output );
}

